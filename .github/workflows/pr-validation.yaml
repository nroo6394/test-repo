name: PR Validation - Conventional Commits

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  contents: read
  statuses: write
  checks: write

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate Conventional Commits
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install --no-save \
            @commitlint/cli@^19.0.0 \
            @commitlint/config-conventional@^19.0.0
            
      - name: Configure commitlint
        run: |
          cat > commitlint.config.js << 'EOF'
          module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'type-enum': [
                2,
                'always',
                [
                  'feat',
                  'fix',
                  'docs',
                  'style',
                  'refactor',
                  'perf',
                  'test',
                  'build',
                  'ci',
                  'chore',
                  'revert'
                ]
              ]
            }
          };
          EOF
          
      - name: Validate commits
        id: validation
        run: |
          echo "🔍 Analyzing commits in this PR..."
          echo ""
          
          # Get commits in the PR (exclude merge commits)
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          COMMITS=$(git rev-list --no-merges $BASE_SHA..$HEAD_SHA)
          
          # Get current version for release calculation
          git checkout $BASE_SHA
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            CURRENT_VERSION=$(git describe --tags --abbrev=0)
          else
            CURRENT_VERSION="none"
          fi
          git checkout $HEAD_SHA
          
          # Initialize counters
          TOTAL_COMMITS=0
          CONVENTIONAL_COMMITS=0
          HIGHEST_RELEASE_TYPE="none"
          
          echo "📋 Analyzing commits:"
          for COMMIT in $COMMITS; do
            TOTAL_COMMITS=$((TOTAL_COMMITS + 1))
            COMMIT_MSG=$(git log --format=%s -n 1 $COMMIT)
            COMMIT_SHORT=$(git log --format=%h -n 1 $COMMIT)
            
            # Check if conventional
            if echo "$COMMIT_MSG" | npx commitlint --verbose 2>/dev/null; then
              CONVENTIONAL_COMMITS=$((CONVENTIONAL_COMMITS + 1))
              echo "✅ $COMMIT_SHORT: $COMMIT_MSG"
              
              # Determine release type
              if echo "$COMMIT_MSG" | grep -q "!:"; then
                HIGHEST_RELEASE_TYPE="major"
              elif echo "$COMMIT_MSG" | grep -E "^feat" && [ "$HIGHEST_RELEASE_TYPE" != "major" ]; then
                HIGHEST_RELEASE_TYPE="minor"
              elif echo "$COMMIT_MSG" | grep -E "^(fix|docs|perf|revert)" && [ "$HIGHEST_RELEASE_TYPE" = "none" ]; then
                HIGHEST_RELEASE_TYPE="patch"
              fi
            else
              echo "❌ $COMMIT_SHORT: $COMMIT_MSG"
            fi
          done
          
          echo ""
          echo "📊 Summary:"
          echo "- Total commits: $TOTAL_COMMITS"
          echo "- Conventional commits: $CONVENTIONAL_COMMITS"
          echo "- Non-conventional commits: $((TOTAL_COMMITS - CONVENTIONAL_COMMITS))"
          echo ""
          
          # Calculate expected version
          EXPECTED_VERSION="no change"
          if [ "$HIGHEST_RELEASE_TYPE" = "major" ]; then
            if [ "$CURRENT_VERSION" != "none" ]; then
              MAJOR=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f1)
              EXPECTED_VERSION="v$((MAJOR + 1)).0.0"
            else
              EXPECTED_VERSION="v1.0.0"
            fi
          elif [ "$HIGHEST_RELEASE_TYPE" = "minor" ]; then
            if [ "$CURRENT_VERSION" != "none" ]; then
              MAJOR=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f2)
              EXPECTED_VERSION="v$MAJOR.$((MINOR + 1)).0"
            else
              EXPECTED_VERSION="v0.1.0"
            fi
          elif [ "$HIGHEST_RELEASE_TYPE" = "patch" ]; then
            if [ "$CURRENT_VERSION" != "none" ]; then
              MAJOR=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f2)
              PATCH=$(echo $CURRENT_VERSION | sed 's/v//' | cut -d. -f3)
              EXPECTED_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
            else
              EXPECTED_VERSION="v0.0.1"
            fi
          fi
          
          echo "🚀 Expected release: $EXPECTED_VERSION"
          echo ""
          
          # Set outputs
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "conventional_commits=$CONVENTIONAL_COMMITS" >> $GITHUB_OUTPUT
          echo "expected_version=$EXPECTED_VERSION" >> $GITHUB_OUTPUT
          
          # Pass if we have at least one conventional commit
          if [ $CONVENTIONAL_COMMITS -gt 0 ]; then
            echo "✅ Validation PASSED"
            echo "validation_status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Validation FAILED - No conventional commits found"
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Update PR status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const validation_status = '${{ steps.validation.outputs.validation_status }}';
            const total_commits = '${{ steps.validation.outputs.total_commits }}';
            const conventional_commits = '${{ steps.validation.outputs.conventional_commits }}';
            const expected_version = '${{ steps.validation.outputs.expected_version }}';
            
            const status = validation_status === 'passed' ? 'success' : 'failure';
            
            let description;
            if (validation_status === 'passed') {
              description = 'PASS';
              
              // Add expected version to description
              if (expected_version !== 'no change') {
                description += ` | New release: ${expected_version}`;
              } else {
                description += ' | No new release (Non release type commits only)';
              }
            } else {
              description = `FAIL: No conventional commits found (0/${total_commits})`;
            }
          
            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'Conventional Commits Validation'
            });