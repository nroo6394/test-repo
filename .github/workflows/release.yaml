name: Automated Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "master"
            ],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "perf", "release": "patch" },
                    { "type": "revert", "release": "patch" },
                    { "type": "docs", "release": "patch" },
                    { "type": "refactor", "release": false },
                    { "type": "test", "release": false },
                    { "type": "build", "release": false },
                    { "type": "ci", "release": false },
                    { "type": "chore", "release": false },
                    { "type": "style", "release": false },
                    { "breaking": true, "release": "major" }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { "type": "feat", "section": "Features" },
                      { "type": "fix", "section": "Bug Fixes" },
                      { "type": "perf", "section": "Performance Improvements" },
                      { "type": "revert", "section": "Reverts" },
                      { "type": "docs", "section": "Documentation" },
                      { "type": "refactor", "section": "Code Refactoring", "hidden": true },
                      { "type": "test", "section": "Tests", "hidden": true },
                      { "type": "build", "section": "Build System", "hidden": true },
                      { "type": "ci", "section": "CI/CD", "hidden": true },
                      { "type": "chore", "section": "Chores", "hidden": true },
                      { "type": "style", "section": "Styles", "hidden": true }
                    ]
                  }
                }
              ],
              [
                "@semantic-release/github",
                {
                  "successComment": false,
                  "failComment": false,
                  "releasedLabels": false
                }
              ]
            ]
          }
          EOF

      - name: Install semantic-release dependencies
        run: |
          npm install --no-save \
            semantic-release@^24.0.0 \
            @semantic-release/github@^11.0.0 \
            @semantic-release/commit-analyzer@^13.0.0 \
            @semantic-release/release-notes-generator@^14.0.0 \
            conventional-changelog-conventionalcommits@^8.0.0

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Running semantic-release..."
          echo ""
          echo "‚ÑπÔ∏è Note: Commit validation was already performed during PR review"
          echo ""
          
          # Get current version before release (if any tags exist)
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(git describe --tags --abbrev=0)
            echo "üìã Previous version: $PREVIOUS_VERSION"
          else
            PREVIOUS_VERSION="none"
            echo "üìã No previous releases found"
          fi
          echo ""
          
          # Trust the PR validation and let semantic-release do its job
          npx semantic-release 2>&1 | tee semantic-release.log
          EXIT_CODE=$?
          
          echo ""
          echo "üîç Semantic-release exit code: $EXIT_CODE"
          echo ""
          
          # Handle different exit codes properly
          if [ $EXIT_CODE -eq 0 ]; then
            # Check if a release was actually created
            if git describe --tags --abbrev=0 >/dev/null 2>&1; then
              NEW_VERSION=$(git describe --tags --abbrev=0)
              if [ "$NEW_VERSION" != "$PREVIOUS_VERSION" ]; then
                echo "‚úÖ Release created successfully!"
                echo ""
                echo "üè∑Ô∏è  New Version: $NEW_VERSION"
                if [ "$PREVIOUS_VERSION" != "none" ]; then
                  echo "üìà Previous Version: $PREVIOUS_VERSION"
                fi
                echo ""
                
                # Try to extract release URL from semantic-release output
                if grep -q "Published GitHub release" semantic-release.log; then
                  RELEASE_URL=$(grep "Published GitHub release" semantic-release.log | sed -n 's/.*Published GitHub release: \(.*\)/\1/p')
                  if [ ! -z "$RELEASE_URL" ]; then
                    echo "üîó Release URL: $RELEASE_URL"
                  fi
                fi
                
                # Show what commits were included
                echo ""
                echo "üìù Commits included in this release:"
                if [ "$PREVIOUS_VERSION" != "none" ]; then
                  git log --oneline --no-merges $PREVIOUS_VERSION..$NEW_VERSION | head -10
                else
                  git log --oneline --no-merges | head -10
                fi
                echo ""
              else
                echo "‚ÑπÔ∏è Semantic-release completed, but no new version was created"
              fi
            else
              echo "‚ÑπÔ∏è Semantic-release completed, but no tags were created"
            fi
          elif [ $EXIT_CODE -eq 1 ]; then
            echo "‚ÑπÔ∏è No release created - this is normal"
            echo ""
            echo "üîç This happens when:"
            echo "   ‚Ä¢ Only non-releasing commits (refactor, test, build, ci, chore, style)"
            echo "   ‚Ä¢ All changes already included in previous releases"
            echo ""
            echo "üìã Recent commits analyzed:"
            git log --oneline --no-merges -5
            echo ""
            echo "‚úÖ Workflow completed successfully"
            # Exit 0 - this is expected behavior
            exit 0
          else
            echo "‚ùå SEMANTIC-RELEASE CONFIGURATION ERROR (exit code: $EXIT_CODE)"
            echo ""
            echo "üö® This indicates a configuration or infrastructure problem:"
            echo ""
            
            # Check for common configuration errors
            if grep -q "ERELEASEBRANCHES" semantic-release.log; then
              echo "‚ùå BRANCH CONFIGURATION ERROR:"
              echo "   ‚Ä¢ Check that the branch name in .releaserc.json matches your actual branch"
              echo "   ‚Ä¢ Current config points to a branch that doesn't exist"
              echo "   ‚Ä¢ Common issue: 'master' vs 'main' branch names"
            elif grep -q "ENOGHTOKEN" semantic-release.log; then
              echo "‚ùå GITHUB TOKEN ERROR:"
              echo "   ‚Ä¢ Missing or invalid GITHUB_TOKEN"
              echo "   ‚Ä¢ Token may lack required permissions"
            elif grep -q "EINVALIDTAGFORMAT" semantic-release.log; then
              echo "‚ùå TAG FORMAT ERROR:"
              echo "   ‚Ä¢ Invalid tag format in configuration"
            elif grep -q "ENOTINHISTORY" semantic-release.log; then
              echo "‚ùå GIT HISTORY ERROR:"
              echo "   ‚Ä¢ Git history or tag issues"
            else
              echo "‚ùå UNKNOWN ERROR:"
              echo "   ‚Ä¢ Check the semantic-release logs above for details"
            fi
            
            echo ""
            echo "üí° Common fixes:"
            echo "   ‚Ä¢ Verify branch configuration in .releaserc.json"
            echo "   ‚Ä¢ Check GITHUB_TOKEN permissions"
            echo "   ‚Ä¢ Ensure Git history is clean"
            echo ""
            echo "üìñ See semantic-release docs: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md"
            echo ""
            
            # This is a real error - exit with failure
            exit $EXIT_CODE
          fi