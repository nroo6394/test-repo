name: Automated Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write


jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure semantic-release
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "main"
            ],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "perf", "release": "patch" },
                    { "type": "revert", "release": "patch" },
                    { "type": "docs", "release": "patch" },
                    { "type": "refactor", "release": false },
                    { "type": "test", "release": false },
                    { "type": "build", "release": false },
                    { "type": "ci", "release": false },
                    { "type": "chore", "release": false },
                    { "type": "style", "release": false },
                    { "breaking": true, "release": "major" }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { "type": "feat", "section": "Features" },
                      { "type": "fix", "section": "Bug Fixes" },
                      { "type": "perf", "section": "Performance Improvements" },
                      { "type": "revert", "section": "Reverts" },
                      { "type": "docs", "section": "Documentation" },
                      { "type": "refactor", "section": "Code Refactoring", "hidden": true },
                      { "type": "test", "section": "Tests", "hidden": true },
                      { "type": "build", "section": "Build System", "hidden": true },
                      { "type": "ci", "section": "CI/CD", "hidden": true },
                      { "type": "chore", "section": "Chores", "hidden": true },
                      { "type": "style", "section": "Styles", "hidden": true }
                    ]
                  }
                }
              ],
              [
                "@semantic-release/github",
                {
                  "successComment": false,
                  "failComment": false,
                  "releasedLabels": false
                }
              ]
            ]
          }
          EOF

      - name: Install semantic-release dependencies
        run: |
          npm install --no-save \
            semantic-release@^24.0.0 \
            @semantic-release/github@^11.0.0 \
            @semantic-release/commit-analyzer@^13.0.0 \
            @semantic-release/release-notes-generator@^14.0.0 \
            conventional-changelog-conventionalcommits@^8.0.0

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release with comprehensive logging
          npx semantic-release 2>&1 | tee semantic-release.log

          # Capture the exit code
          SEMANTIC_RELEASE_EXIT_CODE=${PIPESTATUS[0]}

          # Check results and provide appropriate feedback
          if grep -q "There are no relevant changes, so no new version is released" semantic-release.log; then
            echo ""
            echo "‚ùå No release created - commits do not follow conventional commit format"
            echo ""
            echo "üìã Recent commits analyzed:"
            git log --oneline -10 --pretty=format:"%h %s"
            echo ""
            echo ""
            echo "üí° Conventional Commit Format Required:"
            echo "   feat: description     ‚Üí Minor release (new features)"
            echo "   fix: description      ‚Üí Patch release (bug fixes)"
            echo "   docs: description     ‚Üí Patch release (documentation)"
            echo "   perf: description     ‚Üí Patch release (performance)"
            echo "   feat!: description    ‚Üí Major release (breaking changes)"
            echo "   fix!: description     ‚Üí Major release (breaking changes)"
            echo ""
            echo "   Non-releasing types: refactor, test, build, ci, chore, style"
            echo ""
            echo "üìñ Conventional Commits: https://www.conventionalcommits.org/"
            echo "üìö Internal Guide: https://syscobt.atlassian.net/wiki/spaces/DSRE/pages/5481759950/How+to+Conventional+commits+for+Git"
            echo ""
            exit 1
          elif [ $SEMANTIC_RELEASE_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Semantic release failed with exit code $SEMANTIC_RELEASE_EXIT_CODE"
            echo "Check the logs above for details."
            echo ""
            exit $SEMANTIC_RELEASE_EXIT_CODE
          else
            echo ""
            echo "‚úÖ Release completed successfully!"
            
            # Extract and display release info if available
            if grep -q "Published GitHub release" semantic-release.log; then
              RELEASE_URL=$(grep "Published GitHub release" semantic-release.log | sed -n 's/.*Published GitHub release: \(.*\)/\1/p')
              if [ ! -z "$RELEASE_URL" ]; then
                echo "üöÄ Release URL: $RELEASE_URL"
              fi
            fi
            
            if grep -q "Created tag" semantic-release.log; then
              TAG_NAME=$(grep "Created tag" semantic-release.log | sed -n 's/.*Created tag \(.*\)/\1/p')
              if [ ! -z "$TAG_NAME" ]; then
                echo "üè∑Ô∏è  Tag: $TAG_NAME"
              fi
            fi
            echo ""
          fi
